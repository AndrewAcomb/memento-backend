# import kairos library
# from database import Database


class Server(object):

    def __init__(self):
        self.kairos = Kairos()
        self.database = Database()
        self.glassServerSocket = socket(AF_INET, SOCK_STREAM) # for handling request from google glass
        self.phoneServerSocket = socket(AF_INET, SOCK_STREAM) # for handling request from cell phone
        self.glassPort = 8088
        self.phonePort = 8089
        self.runServer()
    

    def runServer(self):
        start_new_thread(self.glassServerThread)
        start_new_thread(self.phoneServerThread)


    def glassServerThread(self):
        try:
            self.galssServerSocket.bind(('localhost', self.glassPort))
            print("GlassServerSocket binded to port: ", self.glassPort)
            self.glassServerSocket.listen(5)
            print("GlassServerSocket is listening")

            while True:
                conn, addr = self.glassServerSocket.accept()
                start_new_thread(self.glassConnectionThread)
        
        except KeyboardInterrupt:
            print("\nShutting down GlassServerSocket ...\n")
        
        self.glassServerSocket.close()


    def phoneServerThread(self):
        try:
            self.galssServerSocket.bind(('localhost', self.phonePort))
            print("PhoneServerSocket binded to port: ", self.phonePort)
            self.phoneServerSocket.listen(5)
            print("PhoneServerSocket is listening")

            while True:
                conn, addr = self.phoneServerSocket.accept()
                start_new_thread(self.phoneConnectionThread)
        
        except KeyboardInterrupt:
            print("\nShutting down PhoneServerSocket ...\n")
        
        self.phoneServerSocket.close()
        

    """
    path: path of an photo
    """
    # Called when a photo is taken by the galss 
    # How can receive the photo? Listen to http post request?
    def onGlassTakePhoto(self, path):
        names = []
        facePaths = detectFaces(path)
        for facePath in facePaths:
            name = self.recognizeFace(facePath)
            names.append(name)
            if name == "New":
                self.requestName()
        # call self.glass' method to respond



    # Called when self.clientSocket receive a response
    def onReceiveName(self, path, name):
        # call self.phone's method to get subject_id/name called id
        # enroll in kairos & update db is handled by other 
        self.updateKairosAndDB(path, name)



    """
    path: path of a face file
    name: subject_id we assigned to the face
    token: token generated by enrollFace
    """
    # How can we receive all these parameters?
    def updateKairosAndDB(self, path, name):
        token = enrollFace(path, name)
        addFaceToDB(path, name, token)


    """
    path: path of an photo
    """
    def detectFaces(self, path):
        # read the photo by path
        # detect faces with opencv
        # return the list of paths of face


    """
    path: path of a face file
    """
    def recognizeFace(self, path):
        # read the face by path
        # recognize it with kairos
        # if recognized, 
            # return the subjuect_id/name
        # if not recognized,
            # return "New"


    """
    path: path of a face file
    name: subject_id we assigned to the face
    """
    def enrollFace(self, path, name):
        # read the face by path
        # enroll it to kairos
        # return a token of this enrolled face


    """
    path: path of a face file
    name: subject_id we assigned to the face
    token: token generated by enrollFace
    """
    def addFaceToDB(self, path, name, token):
        # call self.database's method to update the face in DB
    

    """
    no parameters are passed in
    """
    def initKairos(self):
        # clear the gallery named "Memento" if it exits
        # initialize "Memento" gallery with all faces in DB
            # call enrollFace() iteratively